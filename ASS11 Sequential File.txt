//ASSIGNMENT No. 11: Sequential file operations

#include<iostream>
#include<fstream>
#include<string.h>
using namespace std;

class student
{
		int roll,div;
		char name[10],address[10];
		
	public:
		void getdata()
		{
		    cout<<"\nEnter Rollnumber,Name,Div & Address=";
		    cin>>roll>>name>>div>>address;
		}
		void putdata()
		{
			cout<<"\n"<<roll<<"\t"<<name<<"\t"<<div<<"\t"<<address;
		}
		int return_Roll(){ return roll;}
			
};
class seq
{
	char fname[15];
public:
	void create();
	void display();
	void Add();
	void Remove(int);
	void search(int);
};
void seq::create()
	{
		ofstream  fp;
		student s;
		char op;
		cout<<"\nenter file name=";
		cin>>fname;
		fp.open(fname);
		do
		{
			s.getdata();
			fp.write(reinterpret_cast<char*>(&s),sizeof(s));
			cout<<"\nDo u want to add new record";
			cin>>op;
		}while(op=='y');
		fp.close();
	}
void seq::display()
	{
		ifstream  fp;
		student s;
		fp.open(fname);
		cout<<"\nRoll\tName\tDiv\tAddress";
		fp.read(reinterpret_cast<char*>(&s),sizeof(s));
		while(!fp.eof())
		{
                      s.putdata();
               	      fp.read(reinterpret_cast<char*>(&s),sizeof(s));
		}
		fp.close();
		
	}
void seq::Add()
	{
		ofstream  fp;
		student s;
		fp.open(fname,ios::app);
		s.getdata();
		fp.write(reinterpret_cast<char*>(&s),sizeof(s));
		fp.close();
	}	
void seq::Remove(int key)
{
 ifstream f1;
 ofstream f2;
 student s;
 int flag=0;
 f1.open(fname);
 f2.open("Temp.Txt");
 f1.read(reinterpret_cast<char*>(&s),sizeof(s));
while(!f1.eof())
{
      if(key==s.return_Roll())
      {   
	      	s.putdata(); 
	      	flag=1;
      }
      else
	        f2.write(reinterpret_cast<char*>(&s),sizeof(s));
f1.read(reinterpret_cast<char*>(&s),sizeof(s));
}
if(flag==0) 
	cout<<"\nRecord does not present";      
f1.close();
f2.close();
remove(fname);
rename("Temp.Txt",fname); 
}
void seq::search(int key)
{
 ifstream fp;
 student s;
 int flag=0;
 fp.open(fname);
 fp.read(reinterpret_cast<char*>(&s),sizeof(s));
while(!fp.eof())
{
        if(key==s.return_Roll())
        {
             flag=1;
             break;
        }     
fp.read(reinterpret_cast<char*>(&s),sizeof(s));
}
if(flag==0) 
	cout<<"Record does not present \n";      
else
	s.putdata();
fp.close();
}

int main()
      {
	int ch,R;
	seq ob;      	
	do
	{
	cout<<"\n1: create Database\n2: Display \n3: Add a record\n4: Delete a record\n5: Search a record";
	cout<<"\nEnter your choice: ";        cin>>ch;
	  switch(ch)
	  {
		case 1:
		      ob.create();	              break;
	        case 2:               		                
	              ob.display();	              break;
	        case 3:
	              ob.Add();	 
	              ob.display();
	              break;
                case 4:
                     cout<<"\nEnter Roll No to delete";       cin>>R;
	             ob.Remove(R);
	             ob.display();
	             break;
	        case 5:                                                                
                     cout<<"\nEnter Roll No to search";       cin>>R;
	             ob.search(R);
	             break;
	   }
}while(ch<6);	            
}
