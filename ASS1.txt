//Stack Application expression conversion & Evaluation
#include<iostream>
#include<ctype.h>
#include<string.h>
#include<math.h>
#include "adt.cpp"

using namespace std;


int priority(char op)
{
static int p=3;
if(op=='(' || op==')')
	return 0;
else if(op=='+' || op=='-')
	return 1;
else if(op=='*' || op=='/')
	return 2;
else if(op=='^')
	return p++;
else 
	return 4;
}

int operation(char op,int A,int B)
{
if(op=='*')
	return A*B;
else if(op=='/')
	return A/B;
else if(op=='^')
	return pow(A,B);
else if(op=='+')
	return A+B;
else if(op=='-')
	return A-B;
else
	return -1;
}

void infixtopostfix(char infix[20])
{
  char token,op,post[20];
  int i,j=0;
  stack<int> S;

for(i=0;infix[i]!='\0';i++)
{
	token=infix[i];
if(isalnum(token))
	post[j++]=token;
else
if(token=='(')
	S.push(token);
else if(token== ')')
	while((op=S.pop())!='(')
		post[j++]=op;
   else
   {
     while(!S.empty() && priority(S.Top())>= priority(token))
		 post[j++]=S.pop();
	S.push(token);
   }
}//for
while(!S.empty())
   post[j++]=S.pop();
post[j]='\0';
cout<<post;
}

void infixtoprefix(char infix[20])
{
  char token,op,pre[20];
  int i,j=0;
  stack<int> S;

for(i=strlen(infix)-1;i>=0;i--)
{
	token=infix[i];
if(isalnum(token))
	 pre[j++]=token;
else if(token==')')
	       S.push(token);
      else if(token== '(')
	while((op=S.pop())!=')')
		pre[j++]=op;
   else
   {
       while(!S.empty() && priority(S.Top())>priority(token))
	   pre[j++]=S.pop();
       S.push(token);
   }
}

while(!S.empty())
    pre[j++]=S.pop();

pre[j]='\0';

for(i=strlen(pre)-1;i>=0;i--)
	cout<<pre[i];
}

float Postfix_Evaluation(char String[20])
{
int I,val;
char token;
float Operand1,Operand2,Result;
stack<char>  S;

for(I=0;String[I]!='\0';I++)
{
token=String[I];
if(isalpha(token))
{
	cout<<"\nEnter the value of "<<token<<"=>";
	cin>>val;
	S.push(val);
}
else
{
	 Operand2=S.pop();
	 Operand1=S.pop();
	 Result=operation(token,Operand1,Operand2);
	 S.push(Result);
}
}
return S.pop();
}

float Prefix_Evaluation(char Str[20])
{
int i,val;
float Op1,Op2,Result;
stack<int>  S;

for(i=strlen(Str)-1;i>=0;i--)
{
      if(isdigit(Str[i]))  
      {
           S.push(Str[i]-48);
      }
      else
      {
	Op1=S.pop();
	Op2=S.pop();
	Result=operation(Str[i],Op1,Op2);
	S.push(Result);
      }
}
return S.pop();
}


int main()
{
 int ch;
 char Expression[25];
 do
  {
   cout<<"\n1:Infix to Postfix\n2:Infix to Prefix\n3:Postfix Evaluation\n4:Prefix Evaluation";
   cout<<"\nEnter your Choice: ";
   cin>>ch;
   switch(ch)
   {
    case 1:
	  cout<<"\nEnter infix Expression=>";
	  cin>>Expression;
	  infixtopostfix(Expression);
	  break;
    case 2:
	  cout<<"\nEnter infix Expression=>";
	  cin>>Expression;
	  infixtoprefix(Expression);
	  break;
   case 3:
	  cout<<"\nEnter Postfix Expression=>";
	  cin>>Expression;
	  cout<<"\nEvaluated Result=> " <<Postfix_Evaluation(Expression);
	  break;

    case 4:
	  cout<<"\nEnter Prefix Expression=>";
	  cin>>Expression;
	  cout<<"\nEvaluated Result=> " <<Prefix_Evaluation(Expression);
	  break;
}
}while(ch<5);
}